

Plan

.gitignore
HEAD
git reflog

terminal

















.gitignore

.gitignore is a special file listing
all files or folders which
you don't want to track with git.

Usually we ignore:

- log files (*.log)
- node_modules folder for npm projects
- files with sensitive data (API keys, private keys)
- IDE config files

Useful website to create .gitignore file:
https://gitignore.io/


Demo

> mkdir 1
> cd 1
> git init
> vim index.html :i hello world :x
> git status  // new file: index.html
open this project in IntelliJ
> git status // new file: .idea index.html
> vim .gitignore :i .idea :x
> git add .gitignore
> git commit -m "Create gitignore"
> git status // now git ignores .idea file










HEAD


HEAD points to the current commit.
Usually it is the latest commit in
your branch

Demo:
> cd 1
> git log --oneline

See all commits and HEAD points to
the latest commit in the list.

Instead of hash value for commits,
you can use HEAD ('rebase', 'reset', 'checkout')

~ (tilde)
refers to previous commit from HEAD

~N refers to Nth commit from HEAD

Example:

abcs Update file   <- HEAD
cs61 Create file   <- HEAD~1
hd7s Create folder <- HEAD~2
ad61 Init project  <- HEAD~3

Usage:

> git show HEAD
shows latest commit

> git show HEAD~1
shows commit before the latest










git reflog


It is a reference log
of all changes tracked by git.

It is like a time-travel machine:
allows you to come back to the past.

It records:

- Commits youâ€™ve made
- Branch checkouts
- Resets, merges, and rebases

git log vs git reflog

git log = all commits in the branch
git reflog = all changes in repo


Example

> git reflog

f3a2b1d (HEAD -> main) HEAD@{0}: commit: Update homepage
a7e4c90 HEAD@{1}: checkout: moving from feature/login to main
d8e9f12 HEAD@{2}: commit: Add login button

Here:

HEAD@{0}, HEAD@{1}, HEAD@{2} - special references



When git reflog is useful?

You have bad commits. You want to remove them.

Example

> git reflog
a1b2c3d HEAD@{0}: commit: Unwanted commit #2
e4f5g6h HEAD@{1}: commit: Unwanted commit #1
789abc0 HEAD@{2}: commit: Good commit (target)

Fix:

> git reset --hard HEAD@{2}
This erases the unwanted commits permanently














Terminal










Let's dive into the command-line world

- Terminal
- CLI
- Console
- Shell
- Bash

Are they the same?

They all mean:
"the place where you type commands
instead of clicking buttons."


Every major software has:

1) GUI (Graphic User Interface)
2) CLI (Command Line Interface)

- GUI is like a layer between the app & user.
- CLI is "closer to the engine of the app".

With CLI you control the app from terminal.

Example

> git add index.html

You're essentially saying:

git - "Hey, git application"
add - "Execute your 'add' command"



Speed

CLI gives us speed and efficiency.

Example

Task: Navigate to a folder projects/my_app/src

In GUI (Graphic User Interface) clicking:

- Click on Finder app (MacOS).
- Click on projects.
- Click on my_app.
- Click on src.

In CLI navigate instantly:

> cd projects/my_app/src



Flags

CLI power comes with flags.

Flags expose advanced features often not
available in GUI.

Example

> git add . -p

Partially stages changes
(no equivalent in GUI)


Example

> ls -l -a

-l = "long" format (permissions, owner, size)
-a = show "all" (incl. hidden files)


We can combine two flags in one:

> ls -la

Dangerous!
> rm -rf

-r = "recursive" (delete folders & inner files)
-f = "force"

Means - delete all including subfolders.

Common flags:

-v = "verbose" output
-f = "force" action
-r = "recursive"
-y = "yes" - auto-confirm



Help

How to know which flags are available?

> git add --help
> man git add

This loads help page in less editor.

How to navigate with less?

j - one line down
k - one line up
space - one screen down
b - one screen up
g - go to top of file
G - go to bottom of file
/ - start search
(e.g. /-p -> search for -p)
n - next search match
N - previous search match
q - exit


Short version of help

> git add -h








Practice:

Open terminal.
Check which options are available for 'ls' command.







&&

We can run commands
sequentially with &&.

Example

> git add . && git commit -m "Add new file"

- Run git add .
- Next run git commit.

Runs sequentially only if
previous commands succeed.

Example

> git checkout main && git pull && git checkout -b new-branch && git cherry-pick abks1 && git push -u origin new-branch

If git pull failed, for example,
the command would stop and will not
create a branch or anything else.






Practice

Open terminal.

1) Create a 'demo' folder (mkdir)
2) Navigate to 'demo' folder (cd)
3) Create a 'new' folder
4) Navigate to 'new' folder
5) Show full path to current directory (pwd)

All in one line.









Answer
(mkdir demo && cd demo && mkdir new && cd new && pwd)








Pipes (|)

Pipe lets you chain commands together,
passing the output of one command
as input to the next.

Demo:

demo/log.txt

cat - print contents of the file
grep - (Global Regular Expression Print) filter output


> cat log.txt
Show contents of log.txt

> grep "ERROR" log.txt
Show only lines with ERROR


Alternatively - use pipe:

> cat log.txt | grep "ERROR"

> cat log.txt | grep "ERROR" | wc -l
3


Example

> ps aux | sort -nk 3 | tail -n 3

- ps aux = Lists all processes
- sort -nk 3 = Sorts by CPU usage (column 3)
- tail -n 3 = Shows the last 3 (highest CPU)








Practice

Open terminal.

1) Read file log.txt. (cat)
2) Find all lines with "WARNING" (grep)
3) Display them in the terminal

All in one line, use pipe.









Answer
(cat log.txt | grep "WARNING")








Error: Command not found

This means that my terminal
doesn't "know" about command.

Let's demo:

1) Create a tiny program

> cd install/
> vim hello

#!/bin/bash
echo "Hello world! I am demo program"

> chmod +x hello

2) Try to run it

> hello
-bash: hello: command not found

It says "not found". Where did it search?



PATH

PATH determines locations where the terminal
looks for commands.

To see these locations:

> echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

: - separates different paths

/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin


To fix the error 'command not found',
do one of below:

1) Copy the app into one of the folders,
specified in PATH.

> sudo cp hello /usr/local/bin

Run it now:

> hello
Hello world! I am demo program

2) Specify the path to my command.

> ./hello
Hello world! I am demo program





(to clean up: sudo rm /usr/local/bin/hello )






Navigation Cheat Sheet

Navigation with terminal

> pwd
Show current directory

> ls
List files

> ls -la
List all files (incl. hidden)

> cd folder
Change directory

> cd ..
Go up one level

> cd
> cd ~
Go to home directory

Each user on the system has their
home directory specified in the
profile. ~ goes there

> cd -
Go to previous directory




Manipulating files & folders

> mkdir name
Create a folder

> touch file.txt
Create a file

> rm file.txt
Delete a file

> rm -r folder/
Delete folder and contents

> cp file.txt new.txt
Copy file.txt as new.txt

> mv file.txt name.txt
Rename file.txt to name.txt

> mv file.txt ..
Move file.txt to parent directory



Contents of the file

> cat file.txt
Print entire file



Searching

> grep "ERROR" log.txt
Search for "ERROR" text in log.txt file

> find . -name "file.txt"
Find file by name









Thank you!